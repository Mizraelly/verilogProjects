// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/07/2020 12:28:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          coder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module coder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [-5:4] x;
// wires                                               
wire [3:0] Q;

// assign statements (if any)                          
coder i1 (
// port map - connection between master ports and signals/registers   
	.Q(Q),
	.x(x)
);
initial 
begin 
#1000000 $finish;
end 

// x[4]
initial
begin
	x[4] = 1'b0;
	x[4] = #60000 1'b1;
	x[4] = #50000 1'b0;
end 

// x[3]
initial
begin
	x[3] = 1'b0;
	x[3] = #120000 1'b1;
	x[3] = #60000 1'b0;
end 

// x[2]
initial
begin
	x[2] = 1'b0;
	x[2] = #200000 1'b1;
	x[2] = #50000 1'b0;
end 

// x[1]
initial
begin
	x[1] = 1'b0;
	x[1] = #260000 1'b1;
	x[1] = #70000 1'b0;
end 

// x[0]
initial
begin
	x[0] = 1'b0;
	x[0] = #340000 1'b1;
	x[0] = #60000 1'b0;
end 

// x[-1]
initial
begin
	x[-1] = 1'b0;
	x[-1] = #410000 1'b1;
	x[-1] = #60000 1'b0;
end 

// x[-2]
initial
begin
	x[-2] = 1'b0;
	x[-2] = #490000 1'b1;
	x[-2] = #50000 1'b0;
end 

// x[-3]
initial
begin
	x[-3] = 1'b0;
	x[-3] = #550000 1'b1;
	x[-3] = #60000 1'b0;
end 

// x[-4]
initial
begin
	x[-4] = 1'b0;
	x[-4] = #630000 1'b1;
	x[-4] = #50000 1'b0;
end 

// x[-5]
initial
begin
	x[-5] = 1'b0;
	x[-5] = #700000 1'b1;
	x[-5] = #40000 1'b0;
end 
endmodule

